# Generated by Django 3.0.2 on 2020-07-04 12:24

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import users.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('full_name', models.CharField(help_text='full name for this user', max_length=255, verbose_name='full name')),
                ('email', models.EmailField(help_text='email for this user', max_length=254, unique=True, verbose_name='email')),
                ('is_admin', models.BooleanField(default=False, help_text='is this user admin?', verbose_name='is admin')),
                ('email_is_verified', models.BooleanField(default=False, help_text='is this user email verified?', verbose_name='email is verified')),
                ('is_active', models.BooleanField(default=True, help_text='is this user active?', verbose_name='is active')),
                ('activator', models.IntegerField(blank=True, help_text='activator of this user', null=True, verbose_name='activator')),
                ('phone_number', models.CharField(blank=True, help_text='the phone number of the user', max_length=20, verbose_name='phone')),
                ('avatar', models.CharField(blank=True, default='', help_text='avatar for this user', max_length=255, verbose_name='avatar')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('city', models.CharField(help_text='the name of the city', max_length=128, verbose_name='name')),
                ('country', models.CharField(help_text='the country of the city', max_length=128, verbose_name='country')),
                ('state', models.CharField(help_text='the state of the city', max_length=128, verbose_name='state')),
            ],
            options={
                'verbose_name': 'city',
                'verbose_name_plural': 'cities',
            },
        ),
        migrations.CreateModel(
            name='TimeZone',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='the name of the time zone', max_length=128, verbose_name='name')),
            ],
        ),
        migrations.CreateModel(
            name='UserAccess',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_type', models.PositiveSmallIntegerField(choices=[(1, 'Brand'), (2, 'Store')], help_text='user type of this record', verbose_name='user type')),
                ('user', models.ForeignKey(help_text='the user of the this record', on_delete=django.db.models.deletion.CASCADE, related_name='user_accesses', to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company_name', models.CharField(help_text='the company name for this user', max_length=255, verbose_name='company name')),
                ('address', models.TextField(help_text='the address for this user', max_length=255, verbose_name='address')),
                ('logo', models.CharField(blank=True, help_text='the logo of this user', max_length=255, verbose_name='logo')),
                ('city', models.ForeignKey(help_text='the city of the profile', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='profiles', to='users.City', verbose_name='city')),
                ('time_zone', models.ForeignKey(help_text='time zone of the user', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='profiles', to='users.TimeZone', verbose_name='time zone')),
                ('user', models.OneToOneField(help_text='the user of the profile', on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'verbose_name': 'profile',
                'verbose_name_plural': 'profiles',
            },
        ),
        migrations.CreateModel(
            name='EmailVerification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('verification_code', models.CharField(default=users.models.get_random_number, help_text='verification code ', max_length=255, verbose_name='verification code')),
                ('expire_date', models.DateTimeField(default=users.models.expire_token_request_at)),
                ('user', models.ForeignKey(help_text='the user of the email verification', on_delete=django.db.models.deletion.CASCADE, related_name='email_verifications', to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
        ),
    ]
